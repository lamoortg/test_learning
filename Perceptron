import numpy as np

class Perceptron(object):
    """Perceptron classifier.

    Parameters
---------
eta : float
    learning rate (between 0.0 and 1.0)
n_iter: int
    passes over the training dataset
random_state : int
    random number generator seed for random weight initialization

Attributes
---------
w_ : 1d-array
    weigts after fitting
errors_ : list number of misclassifiactions in each epoch. """

def __init__(self, eta=0.01, n_iter=50, random_state=1):
        self.eta = eta
        self.n_iter = n_iter
        self.random_state = random_state
def fit(self, x, y):

    """ X and Y are array-like (X is n_examples, n-features) training vectors, where n_examples
    is the number of examples and n_features is the number of n_features
    Y the target values (array-like) shape = n_examples.

    self : object"""

rgen = np.random.RandomState (self.random_state)
self.w_rgen.normal (loc=0.0, scale=0.01, size=1 + X.shape[1])
self.errors_=[]

for _ in range(self.n_iter):
    errors=0
    for xi, target in zip(X,y):
        update= self.eta * (target - self.predict(xi))
        self.w_[1:] += update * xi
        self.w_[0] += update
        errors += int (update != 0.0)
    self.errors_.append(errors)
return self

def net_input(self, X):
    """ calculate the net input"""
    return np.dot(X, self.w_[1:])+ self.w_[0]

def predict(self, X):
    return np.where(self.net_input(x) >= 0.0, 1, -1)
    """return class label after unit step"""
